AXIProtocolChecker
------------------
The protocol checker monitors the AXI signaling and reports protocol errors
detected on the signals. In the default mode (when no configuration of the
protocol checker is done) it only monitors AXI responses and generates an error
report whenever an AXI error reply is detected. If given a configuration the
protocol checker can be configured to also perform the following checks:

	* Check that signals in any channel (AR, AW, R, B, W) are stable
	  while valid is asserted but ready is low.

	* Check read transactions ordering.

	* Check that wlast is generated correctly (on the last burst transfer).

	* Check that the wstrb of the transaction is correct (it can allow
	  holes in the wstrb and will then only verify that all bytes outside
	  the wstrb are disabled).

	* Check that the first data item on AXI3 interleaved data (on the
	  write data channel) is in the order of the addresses.

	* Verifies burst lengths of transactions taking burst type in
	  consideration (the burst length must be 2, 4, 8 or 16 for wrap
	  transactions)

	* Verifies address alingment based on burst type (the start address
	  must be aligned to the size of each transfer on wrap transactions)

	* Verifies that expected handshakes signals on the data an response
	  channels are detected after receiving awvalid and arvalid. It is
	  considered and reported as a hangup if a given amount of clock cycles
	 (default 200) pass before an expected signal has been detected.

	* Verifies that arvalid, rvalid, awvalid, wvalid and bvalid are
	  deasserted the first cycle after reset has been released.

AXIPCConfig - Configuraring the protocol checker
------------------------------------------------
The protocol checker is configured at construction with an AXIPCConfig. Through
the AXIPCConfig the checks desired to be performed by the protocol checker are
setup.

AXILiteProtocolChecker
----------------------
The AXI4Lite protocol checker monitors AXI4Lite signaling and reports protocol
errors detected on the signals. In the default mode (when no configuration of
the protocol checker is done) it only monitors responses and generates an error
report whenever an AXI4Lite error reply is detected. If given a configuration
the protocol checker can be configured to also perform the following checks:

	* Check that signals in any channel (AR, AW, R, B, W) are stable
	  while valid is asserted but ready is low.

	* Verifies that expected handshakes signals on the data an response
	  channels are detected after receiving awvalid and arvalid. It is
	  considered and reported as a hangup if a given amount of clock cycles
	 (default 200) pass before an expected signal has been detected.

	* Verifies that arvalid, rvalid, awvalid, wvalid and bvalid are
	  deasserted the first cycle after reset has been released.

AXILitePCConfig - Configuraring the protocol checker
------------------------------------------------
Similar to the AXI protocol checker the AXI4Lite protocol checker is configured
at construction with an AXILitePCConfig. Through the AXILitePCConfig the checks
desired to be performed by the protocol checker are setup.

ACEProtocolChecker
------------------
The protocol checker monitors the ACE signaling and reports protocol
errors detected on the signals. The checks to be performed by the protocol
checker must be enabled through configuration (in the default mode no
checks are configured). The following is a list of checks the protocol
checker supports:

	* Check that signals in any channel (AR, AW, R, B, W, AC, CR and
	  CD) are stable while valid is asserted but ready is low.

	* Check that rlast, rack, wlast and wack are generated correctly.

	* Checks read transaction signaling. This check verifies signaling
	  on the ar and r channels. On the ar channel the signaling is
	  validated according to section C3.1.5 [1] and on the r channel
	  a check on rlast is performed.

	* Checks write transaction signaling. This check verifies
	  signaling the aw and w channels. On the aw channel the signaling
	  is validated according to section C3.1.5 [1] and on the w channel
	  a check on wlast is performed.

	* Checks responses on the r and b channel. On the r channel it
	  validates the is shared and pass dirty bits.

	* Checks snoop transaction signaling. This check verifies
	  signaling on the ac, cr and cd channels.

	* Checks ACE barriers are issued in the same sequence on the read
	  and write channels.

	* Verifies that expected handshakes signals on the channels are
	  detected after receiving awvalid, arvalid and acvalid. It is
	  considered and reported as a hangup if a given amount of clock
	  cycles (default 200) pass before an expected signal has been
          detected.

	* Verifies that arvalid, rvalid, awvalid, wvalid, bvalid, rack,
	  wack, acvalid, crvalid and cdvalid are deasserted the first
          cycle after reset has been released.

	* Can opitionally follow cacheline allocations and assert if it
	  recomendations on section 5.2.2a [1] are not followed.

ACELiteProtocolChecker
------------------

The ACELite protocol checker works in a similar fashion as the ACE protocol
checker. All checks are disabled by default and have to be enabled through an
ACEPCConfig given at construction. The checks that can performed on the ACELite
signaling are subset of the checks done in the ACE protocol checker and the
checks that are valid for ACELite signaling:

	* Check that signals in any channel (AR, AW, R, B, W) are stable
	  while valid is asserted but ready is low.

	* Checks read transaction signaling. This check verifies signaling
	  on the ar and r channels. On the ar channel the signaling is
	  validated according to section C11.2 [1] and on the r channel
	  a check on rlast is performed.

	* Checks write transaction signaling. This check verifies
	  signaling the aw and w channels. On the aw channel the signaling
	  is validated according to section C11.2 [1] and on the w channel
	  a check on wlast is performed.

	* Checks responses on the r and b channel.

	* Checks ACE barriers are issued in the same sequence on the read
	  and write channels.

	* Verifies that expected handshakes signals on the channels are
	  detected after receiving awvalid and arvalid. It is considered
	  and reported as a hangup if a given amount of clock cycles
	  (default 200) pass before an expected signal has been detected.

	* Verifies that arvalid, rvalid, awvalid, wvalid  and bvalid are
	  deasserted the first cycle after reset has been released.

ACEPCConfig - Configuraring the ACE / ACELite protocol checkers
------------------------------------------------

The ACE and ACELite protocol checkers are configured at construction with an
ACEPCConfig. Through the ACEPCConfig the checks desired to be performed by the
protocol checkers are setup. The ACELite protocol checker will ignore
configured checks that are not applicable to ACELite (for example checks on the
snoop channels).

CHIProtocolChecker
------------------

The CHI protocol checker monitors CHI signaling between an RN-F and an ICN
and reports protocol errors detected on the signals. All checks are
disabled by default and have to be enabled with a CHIPCConfig given at
class construction. The CHI protocol checker can be configured to perform
the following checks:

	* Check CHI requests and validate fields in the request flit
	  as the Opcode, SnpAtt, Excl, Order, AllowRetry, Address (atomic)
	  and Size.

	* Check CHI data flit opcodes

	* Check CHI snoop request opcodes and validate DVM messages

	* Check CHI responses opcodes

	* Check that outstanding link credits on the CHI channels are between 0
	 - 15 (13.2.1 [2])

	* Check transactions structures (read, dataless, write and snoop
	  transactions, 2.3 [2]).

	* Check request retries and Protocol Credits (2.11 [2]).

CHIPCConfig - Configuraring the CHI protocol checker
----------------------------------------------------

The CHI protocol checker is configured at construction with an
CHIPCConfig. Through the CHIPCConfig the checks desired to be performed by the
protocol checkers are setup.

Error reports
-------------
The AXI, AXI4Lite, ACE, ACELite and CHI protocol checkers report errors
using systemc's SC_REPORT_ERROR macro and errors can thus be
caught/intercepted through systemc's error reporting API.

Example 1 - Default configuration
---------------------------------
For only checking for AXI responses containing AXI error replies:
...
{
	...
	AXIProtocolChecker<32, 32> checker("checker");
	...
}
...

Example 2 - Configuring the protocol checker to perform all checks
------------------------------------------------------------------
The following example configures the protocol checker to perform all checks:

...
AXIPCConfig checker_config()
{
	AXIPCConfig cfg;

	cfg.enable_all_checks();

	return cfg;
}
...
{
	...
	AXIProtocolChecker<32, 32> checker("checker", checker_config());
	...
}
...

Example 3 - Configuring the protocol checker to check AXI handshakes
--------------------------------------------------------------------
The following example configures the protocol checker to check AXI handshakes
(while also performing the AXI response check):
...
AXIPCConfig checker_config()
{
	AXIPCConfig cfg;

	cfg.check_axi_handshakes();

	return cfg;
}
...
{
	...
	AXIProtocolChecker<32, 32> checker("checker", checker_config());
	...
}
...

Example 4 - Howto disable a check
--------------------------------------------------------------------
The following example disables the AXI response check:
...
AXIPCConfig checker_config()
{
	AXIPCConfig cfg;

	cfg.check_axi_responses(false);

	return cfg;
}
...
{
	...
	AXIProtocolChecker<32, 32> checker("checker", checker_config());
	...
}
...

Example 5 - Configuring the AXI4Lite protocol checker to perform all checks
---------------------------------------------------------------------------
The following example configures the protocol checker to perform all checks:

...
AXILitePCConfig checker_config()
{
	AXILitePCConfig cfg;

	cfg.enable_all_checks();

	return cfg;
}
...
{
	...
	AXILiteProtocolChecker<32, 32> checker("checker", checker_config());
	...
}
...

Example 6 - Configuring the ACE protocol checker to perform all checks
---------------------------------------------------------------------------
The following example configures the protocol checker to perform all checks:

...
ACEPCConfig checker_config()
{
	ACEPCConfig cfg;

	cfg.enable_all_checks();

	return cfg;
}
...
{
	...
	ACEProtocolChecker<32, 32> checker("checker", checker_config());
	...
}

Example 7 - Configuring an ACELite protocol checker
---------------------------------------------------------------------------
The following example configures the protocol checker to perform all checks:

...


ACEPCConfig checker_config()
{
	ACEPCConfig cfg;

	cfg.enable_all_checks();

	return cfg;
}
...
{
	...
	ACELiteProtocolChecker<32, 32> checker("checker", checker_config());
	...
}
...

Example 8 - Configuring an CHI protocol checker
---------------------------------------------------------------------------
The following example configures the protocol checker to perform all checks:

...


CHIPCConfig checker_config()
{
	CHIPCConfig cfg;

	cfg.enable_all_checks();

	return cfg;
}
...
{
	...
	CHIProtocolChecker<> checker("checker", checker_config());
	...
}
...


References
----------

 [1] AMBA AXI and ACE Protocol Specification, ARM IHI 0022D, ID102711
 [2] AMBA 5 CHI Architecture Specification, ARM IHI 0050C, ID050218
