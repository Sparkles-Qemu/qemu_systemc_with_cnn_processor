

1. Introduction
-------------
This document gives architecture, data flow and system level details of the
AXI Hardware Bridges.

---------------------------------------------------------
|			Acronyms			|
---------------------------------------------------------
|QEMU	- Quick Emulator                                |
|AXI	- Advanced eXtensible Interface                 |
|ACE	- AXI Coherency Extensions                      |
|XDMA	- Xilinx DMA IP                                 |
|FPGA	- Field Programmable Gate Array                 |
|PCIe	- Peripheral Component Interconnect Express     |
|DUT	- Device Under Test                             |
|EP	- End Point                                     |
|MSI	- Message Signaled Interrupt                    |
|MSI-X	- Message Signaled Interrupt - Extended         |
|BAR	- Base Address Register                         |
|TLM	- Transaction-level Modeling                    |
|DESC	- Descriptor                                    |
|C2H	- Card to Host                                  |
|H2C	- Host to card                                  |
---------------------------------------------------------


Features and Specifications
-----------------------------

1. DUT will be implemented in FPGA
2. QEMU and  LibSystemCTLM-SoC run on x86 host 
3. PCIe protocol used as medium to connect x86 (as Root Complex) with FPGA (as
EndPoint)
4. Supports AXI3/AXI4/AXI-LITE protocols


AXI FPGA Bridges supports 3 modes of operation
	
1) Mode_0: Register Access mode ( Preferable for smaller size
transactions) In this mode, software programs the attributes in the BAR mapped
Protocol Bridge's address/register space. The protocol bridges then create
protocol based pin wiggling onto the DUT. The Write/read data corresponding to
the AXI transactions are written/read by Host software. If the DUT has the AXI
Master, then the AXI Slave is in SystemC/TLM framework on x86, and vice versa.
The attributes of the AXI transactions are required for the TLM Traffic
generator to generate transactions/response towards AXI Master/Slave on
SystemC side.

2) Mode_1: Indirect DMA Mode (Gives better performance and efficient for larger
size transactions) In this mode, software programs the attributes in the BAR
mapped Protocol Bridge's address/register space. The protocol bridges then
create protocol based pin wiggling onto the DUT. The Write/read data
corresponding to the AXI transactions are written/read by protocol bridge
to/from Host memory into its Data RAM.If the DUT has the AXI Master, then the
AXI Slave is in SystemC/TLM framework on x86, and vice versa. The attributes
of the AXI transactions are required for the TLM Traffic generator to generate
transactions/response towards AXI Master/Slave on SystemC side.


Please refer axi-master-bridge.txt for AXI Master Bridge Microarchitecture

Please refer axi-slave-bridge.txt for AXI Slave Bridge Microarchitecture

Managing WR/RD DATARAM
-----------------------

The WR/RD DataRam is actually set of BAR mapped registers and the access to
the registers has to be DWORD aligned.

In the below diagram, Consider SW needs to program three descriptors: 


	+--------+--------+--------+---------+---------------------+
	|        |        |        |         |                     |
	|   4    |   3    |   2    |  1      |    0xC000           |
	+----------------------------------------------------------+
	|        |        |        |         |                     |
	|   8    |   7    |   6    |   5     |    0xC004           |
	+----------------------------------------------------------+
	|        |        |        |         |                     |
	|   X    |   X    |   10   |   9     |    0xC008           |
	+----------------------------------------------------------+
	|        |        |        |         |                     |
	|   4    |   3    |   2    |   1     |    0xC00C           |
	+----------------------------------------------------------+
	|        |        |        |         |                     |
	|   8    |   7    |   6    |   5     |    0xC010           |
	+----------------------------------------------------------+
	|        |        |        |         |                     |
	|   12   |   11   |   10   |   9     |    0xC014           |
	+----------------------------------------------------------+
	|        |        |        |         |                     |
	|   16   |   15   |   14   |   13    |    0xC018           |
	+-------++--------+-----+--+---------+-------+-------------+
	        |               |                    |
	        |               |                    |
	--------++--------+-----+--+---------+-------+-------------+
	|        |        |        |         |                     |
	|   4    |   3    |   2    |   1     |    0xFFF0           |
	+----------------------------------------------------------+
	|        |        |        |         |                     |
	|   8    |   7    |   6    |   5     |    0xFFF4           |
	+----------------------------------------------------------+
	|        |        |        |         |                     |
	|   12   |   11   |   10   |   9     |    0xFFF8           |
	+----------------------------------------------------------+
	|        |        |        |         |                     |
	|   X    |   X    |   X    |   13    |    0xFFFC           |
	+--------+--------+--------+---------+---------------------+


DESC1 : WR transaction of 10 Bytes (Shown in Row 1-2-3 ) 
DESC2:  WR transaction of 16 Bytes (Shown in Row 4-5-6-7 ) 
DESC3:  WR transaction of 13 Bytes (Shown in 8-9-10-11 )

Consider offset address of WR DataRam for DESC 1 is 0xC000 (start address of
WR DataRam). Since size of transaction of this DESC is 10 Bytes in size, it
will occupy space up-till address 0xC008, in which only 2 Bytes are valid.
This is controlled by byte enables in PCIe and eventually as WSTRB on AXI
interface.

Since, WR DataRam is DWORD aligned, the starting address of DESC 2 can only be
at next DWORD aligned address i.e. 0xC00C as shown in the figure. 

Since, each DESC has individual OFFSET_ADDR register, it is not necessary that
WR DataRam has to be filled contiguously. As shown in below figure, DESC 3, of
13 bytes bytes transaction size, can start from address 0xFFF0 and end at
0xFFFC (which is the end address of WR DataRam).

This example is for WR DataRam, However similar rules for RD DataRam will also
apply.


AXI Bridges use-model
---------------------

AXI Master and Slave Bridge use-model with AXI Master and Slave Device Under Tests (DUT) and PCIe Sub-system is shown in below diagram.

                             ___________________________________________________________________________________________________________
                            |    ___________________________________________|__________                                                 |                         
    ______________          |   |     ___________________________       |   |          |          ___________________________           |         ______________
   |              |         |   |    |                           |      |   |          |         |                           |          |        |              |         
   |              |         |   |    |                           |      |   |----------(---+---->|AXI_ACLK                   |          |------->|CLK           |
   |              |         |   |    |                           |      |              |   |     |                  USR_M_AXI|------------------>|S_AXI         |
   |       AXI_CLK|---------+---)--->|*_ACLK                     |      +--------------(---(---->|AXI_ARESET_N               |                   |              |
   |              |         |   |    |                           |                     |   |     |                 USR_RESETN|------------------>|RSTN          |
   |     AXI_RST_N|---------)---+--->|*_ARESET_N                 |                     |   |     |                           |                   |              |
   |              |         |   |    |                           |                     |   |     |                           |                   |              |
   |         M_AXI|---------)---)--->|S00_AXI             M00_AXI|---------------------(---(---->|S_AXI                      |                   |              |
   |              |         |   |    |                           |                     |   |     |                           |                   |              |
   |              |         |   |    |            AXI            |                     |   |     |                           |                   |              |          
   |              |         |   |    |        INTERCONNECT       |                     |   |     |        AXI MASTER         |                   |  AXI SLAVE   | 
   |              |         |   |    |                           |                     |   |     |         BRIDGE            |                   |     DUT      |
   |              |         |   |    |                           |                     |   |     |                           |                   |              |
   |              |         |   |    |                           |                     |   |     |                           |                   |              |
   |              |         |   |    |                    M01_AXI|-----------          |   |     |               H2C_INTR_OUT|------------------>|INTR_IN       |
   |              |         |   |    |                           |          |  +-------(---(-----|M_AXI                      |                   |              |
   |              |         |   |    |                           |          |  |       |   |     |                C2H_INTR_IN|<------------------|INTR_OUT      |
   |              |         |   |    |                           |  |-------|--|-------(---(-----|IRQ_OUT                    |                   |              |
   |   PCIe Core  |         |   |    |                           |  |       |  |       |   |     |                C2H_GPIO_IN|<------------------|GPIO          |
   |       &      |         |   |    |                           |  |  -----|--|-------(---(---->|IRQ_ACK                    |                   |              |
   |    AXI-MM    |         |   |    |                           |  |  |    |  |       |   |     |                           |                   |              |
   |    Bridge    |         |   |    |___________________________|  |  |    |  |       |   |     |___________________________|                   |______________|
   |              |         |___|___________________________________|__|____|  |_______|___|____________________________________________
   |              |         |   |     ___________________________   |  |    |  |       |   |      ___________________________           |         ______________
   |              |         |   |    |                           |  |  |    |  |       |   |     |                           |          |        |              |         
   |              |         |   |    |                           |  |  |    |--)-------(---(---->|                           |          |------->|CLK           |
   |              |         |   |    |                           |  |  |       |       |   |     |S_AXI                      |                   |              |
   |              |         |   |    |                    S00_AXI|<-)--)--------       |   |     |                  USR_S_AXI|<------------------|M_AXI         |
   |              |         +---)--->|*_ACLK                     |  |  |               |   ----->|AXI_ACLK                   |                   |              |
   |              |             |    |                           |  |  |               |         |                 USR_RESETN|------------------>|RSTN          |
   |              |             ---->|*_ARESET_N                 |  |  |               |-------->|AXI_ARESET_N               |                   |              |
   |              |                  |                           |  |  |                         |                           |                   |              |
   |              |                  |                           |  |  |                         |                           |                   |              |
   |              |                  |                           |  |  |                         |                           |                   |              |          
   |              |                  |           AXI             |  |  |                         |        AXI SLAVE          |                   |  AXI MASTER  | 
   |              |                  |       INTERCONNECT        |  |  |                         |         BRIDGE            |                   |     DUT      |
   |              |                  |                           |  |  |                         |                           |                   |              |
   |              |                  |                           |  |  |                         |                           |                   |              |
   |              |                  |                    S01_AXI|<-)--)-------------------------|M_AXI          H2C_INTR_OUT|------------------>|INTR_IN       |
   |         S_AXI|<-----------------|M00_AXI                    |  |  |                         |                           |                   |              |
   |              |                  |                           |  |  |                         |                C2H_INTR_IN|<------------------|INTR_OUT      |
   |        IRQ_IN|<----------       |                           |  |  |       ------------------|IRQ_OUT                    |                   |              |
   |              |          |       |                           |  |  |       |                 |                C2H_GPIO_IN|<------------------|GPIO          |
   |       IRQ_ACK|------    |       |                           |  |  |       | +-------------->|IRQ_ACK                    |                   |              |
   |              |     |    |       |                           |  |  |       | |               |                           |                   |              |
   |______________|     |    |       |___________________________|  |  |       | |               |___________________________|                   |______________|
                        |    |                                      |  |       | |      
                        |    |                                      |  |       | |      
                        |    |       _____________________________  |  |       | |      
                        |    |       |                           |<-|  |       | |      
                        |    |-------|      CONCATENATION        |     |       | |      
                        |            |___________________________|<----)-------+ |      
                        |                                              |         |      
                        |            _____________________________     |         |      
                        |            |                           |-----|         |      
                        |----------->|        SPLITTER           |               |      
                                     |___________________________|----------------      
                                       




Software-Hardware Flow
-----------------------


AXI Master HW Bridge ( tlm2axi-hw-bridge )
-----------------------------------------


Mode_0 : Register Access

In Mode_0, WDATA/RDATA is stored in BAR mapped registers of the AXI Protocol
HW bridge; Software will read them from register space and provide the
information to TLM Traffic generator.

Initial Configuration 

1. SW (Software) to read BRIDGE_CONFIG registers to know bridge capability.

2. SW to program MODE_0_1 Bit in MODE_SELECT Register to select mode_0 i.e.
Register Access mode 

3. SW to program INTR_COMP_ENABLE_REG and INTR_ERROR_ENABLE_REG  for interrupt
mode. This step is not required in polling mode.  

4. SW to program descriptors (Registers of type Descriptor (DESC_*)) based on
number of outstanding transaction to indicate various attributes of the WR/RD
transaction like: DUT address, length, size, exclusive, lock, etc. along with
offset address of the data RAM.  

5. In case of WR transaction SW has to fill WR Data and WSTRB RAM at
programmed offset address. Refer section "Managing WR/RD DATARAM" for more
details.

Data Flow

1. SW to program corresponding bit/bits in OWNERSHIP_FLIP_REG register indicating
to Bridge to initiate AXI transaction towards the DUT.  Bridge will de-assert
corresponding bit in OWNERSHIP_REG register upon getting response from DUT.

2. SW to wait for interrupt and then read INTR_STATUS_REG or poll
INTR_STATUS_REG register depending on Intr/poll mode of operation.
	2.a If ERROR field of INTR_STATUS_REG is set, it means some system
error has occurred. Read INTR_ERROR_STATUS_REG to identify the cause of error.
SW to take appropriate action based on severity. i,e SW can issue soft-reset
by writing into RESET_REG.
	2.b If COMP field of INTR_STATUS_REG is set, it means at least one
transaction was completed with or without AXI (BRESP/RRESP) error.
	2.c SW to read INTR_COMP_STATUS_REG to check which transaction got
completed

3. In interrupt mode
	3.a SW to set respective bits of INTR_COMP_CLEAR_REG.
	3.b HW to de-assert irq_out.

4. SW to read STATUS_RESP_REG to determine response from corresponding AXI
BRESP/RRESP fields of each transaction.

5. For RD transactions, SW to read the data (RDATA) from offset address
programmed. In case of RRESP error, SW can ignore the RDATA in Bridge's DATA
RAM.

6. SW to program the next descriptor if any, and assert the OWNERSHIP_FLIP_REG
register to HW.


Mode_1 : Indirect DMA mode

In Mode_1, Software configures the HW bridge with address in host memory
from/to where WDATA/RDATA need to be copied to in host memory.

Initial Configuration

1. SW to read BRIDGE_CONFIG register to know bridge capability.

2. SW to program MODE_0_1 Bit in MODE_SELECT Register to select mode_1 i.e.
Indirect DMA mode

3. SW to program INTR_COMP_ENABLE_REG and INTR_ERROR_ENABLE_REG  for interrupt
mode.  SW to program descriptors (Registers of type Descriptor (DESC_*)) based
on number of outstanding transaction to indicate various attributes of the
WR/RD transaction like: DUT address, length, size, exclusive, lock, etc. along
with offset address of the data RAM. 

4. In addition to the attributes programmed in Mode_0, SW has to program host
address of the data ( and STRB in case Writes ) into the Bridge.  Data Flow

5. SW to program OWNERSHIP_FLIP_REG register of the HW Bridge to initiate AXI
transaction towards the DUT.

6. For WR transactions, HW bridge will fetch data from HOST address and fill
DATA RAM at programmed offset address.

7. For RD transactions, HW bridge will populate RDATA from DATA RAM into HOST
addresses.

8. For Write transactions, HW Bridge will de-assert corresponding bit in
OWNERSHIP_REG register upon getting response from DUT.

9. For Read transactions, HW Bridge will de-assert corresponding bit in
OWNERSHIP_REG register upon getting response from DUT and updating read data
at HOST memory.


Data Flow

1. SW to wait for interrupt and then read INTR_STATUS_REG or poll
INTR_STATUS_REG register.
	1.a If ERROR field of INTR_STATUS_REG is set, it means that a system
error has occurred.
	1.b Read INTR_ERROR_STATUS_REG to identify the cause of error. SW to
take appropriate action based on severity. SW can issue soft-reset by writing
into RESET_REG.

2. If COMP field of INTR_STATUS_REG is set, it means at least one transaction
was completed with or without AXI (BRESP/RRESP) error.
	2.a SW to read INTR_COMP_STATUS_REG to check which transaction got
completed

In interrupt mode

3. SW to set respective bits of INTR_COMP_CLEAR_REG.

4. For interrupt mode, HW to de-assert irq_out.

5. For WR transactions, SW to read STATUS_RESP_REG to get BRESP information of
particular write transaction.

6. For RD transactions, SW to read STATUS_RESP_REG to get RRESP information of
particular read transaction. 
	6.a If RRESP is OKAY , then read data (RDATA) is available at HOST
address.
	6.b If RRESP is not OKAY, software to take care of RDATA to be given
to AXI Master on SysC/TLM side

7. SW to program the next descriptor if any, and assert the OWNERSHIP_FLIP_REG
register to HW.



AXI Slave HW Bridge ( axi2tlm-hw-bridge )
---------------------------------------

RTL parameter will define/Select if the HW Bridge is in Master mode or Slave
mode

Mode_0 : Register Access

Configuration & Attributes Steps

1. SW to read BRIDGE_CONFIG registers to know bridge capability.

2. SW to program MODE_0_1 Bit in MODE_SELECT Register to select mode_0 i.e.
register access mode

3. SW to program IMM_BRESP of MODE_SELECT, if required.

4. SW to program INTR_TXN_AVAIL_ENABLE_REG,  INTR_COMP_ENABLE_REG and
INTR_ERROR_ENABLE_REG  for interrupt mode.

5. SW to program OWNERSHIP_FLIP Register as 0xFFFF to HW, to indicate that Bridge can
accept transactions from DUT. 

Data Flow

1. SW to wait for interrupt and then read  INTR_STATUS_REG or poll
INTR_STATUS_REG register.
	1.a If field ERROR of INTR_STATUS_REG is set, system error has
occurred. Read INTR_ERROR_STATUS_REG for further details. SW to take
appropriate actions i.e. issue soft-reset.
	1.b If field TXN_AVAIL of INTR_STATUS_REG is set, at least one
transaction request available from DUT.

2. SW to read INTR_TXN_AVAIL_STATUS_REG to know which transaction request
occurred.

3. SW to set respective bits INTR_TXN_AVAIL_CLEAR_REG.

4. For interrupt mode
	4.a SW to set respective bits of INTR_TXN_AVAIL_CLEAR_REG.
	4.b For interrupt mode, HW to de-assert irq_out.

5. In case of WR, SW to read data starting from address
DESC_N_DATA_RAM_ADDR_REG  from DATARAM based on transaction size.

6. In case of RD, SW to write data starting from address
DESC_N_DATA_RAM_ADDR_REG  from DATARAM based on transaction size.

7. SW to program respective STATUS_RESP_REG. 

8. SW to program respective bit/s in  STATUS_RESP_COMP_REG to 1. 

9. SW to program response order in RESP_ORDER_REG.

10. SW to give ownership back to HW using OWNERSHIP_FLIP_REG

11. In case of RD, HW to generate read response.

12. In case of WR
	12.a if IMM_BRESP is 0, HW to generate write response.
	12.b If IMM_BRESP=1, HW Bridge will generate immediate bresp after
receiving the request.

12. HW to give OWNERSHIP_REG back to SW  (and for interrupt mode, generate
COMP interrupt). 

13. For interrupt mode
	13.a SW to set respective bits of INTR_COMP_CLEAR_REG. .
	13.b For interrupt mode, HW to de-assert irq_out.

14. SW to write STATUS_RESP_COMP_REG to 0x0

15. SW to program OWNERSHIP_FLIP_REG Register to HW ( Only if OWNERSHIP_REG is
0x0 and STATUS_BUSY_REG is 0x0 ), to indicate that Bridge can accept
transactions from DUT, if any.


Mode_1 : Indirect DMA

Configuration & Attributes Steps

1. SW to read BRIDGE_CONFIG registers to know bridge capability.

2. SW will program MODE_0_1 Bit in MODE_SELECT Register to select mode_1 i.e.
Indirect DMA mode

3. SW to program IMM_BRESP of MODE_SELECT, if required.

4. SW to program INTR_TXN_AVAIL_ENABLE_REG,  INTR_COMP_ENABLE_REG and
INTR_ERROR_ENABLE_REG  for interrupt mode.

5. In addition to the attributes programmed in Mode_0,

6. SW has to program host address of the data ( and STRB in case Writes ) into
the Bridge.

7. SW will program OWNERSHIP_FLIP Register as 0xFFFF to HW, to indicate that Bridge can
accept transactions from DUT. 

Data Flow

1. SW to wait for interrupt and then read  INTR_STATUS_REG or poll
INTR_STATUS_REG register
	1.a If field ERROR of INTR_STATUS_REG is set, system error has
occurred. Read INTR_ERROR_STATUS_REG for further details. SW to take
appropriate actions i.e. issue soft-reset.

2. If field TXN_AVAIL of INTR_STATUS_REG is set, at least one transaction
request available from DUT.

3. SW to read INTR_TXN_AVAIL_STATUS_REG to know which transaction request
occurred.

4.For interrupt mode
	4.a SW to set respective bits INTR_TXN_AVAIL_CLEAR_REG.
	4.b For interrupt mode, HW to de-assert irq_out.

5. In case of WR, it means write-data is available at Host memory.

6. In case of RD, SW to fill read-data in Host memory. 

7. SW to program respective STATUS_RESP_REG. 

8. SW to program response order in RESP_ORDER_REG.

9. SW to give OWNERSHIP_REG back to HW

10. In case of RD, HW to fetch rdata from Host memory to RD DATARAM and
generate read response to the DUT.

11. In case of WR
	11.a if IMM_BRESP is 0, HW to generate write response.
	11.b If IMM_BRESP=1, HW Bridge will generate immediate bresp after
receiving the request.

12. HW to give OWNERSHIP_REG back to SW and for interrupt mode, generate COMP
interrupt. 

13. For interrupt mode
	13.a SW to set respective bits of INTR_COMP_CLEAR_REG.
	13.b For interrupt mode, HW to de-assert irq_out.

14. SW will program OWNERSHIP_FLIP_REG Register to HW ( Only if OWNERSHIP_REG
is 0x0 and STATUS_BUSY_REG is 0x0 ), to indicate that Bridge can accept
transactions from DUT, if any.


Bridge Discovery Mechanism
---------------------------

Following is the sequence to identify number of bridges in the design and their addresses.

While building design using bridges,

1. User will have to make sure that Bridges are connected to BAR-0 starting from offset 0x0. 
2. All bridges should be connected to consecutive locations without any gap in between. [ Every 128 KB from ( BAR-0 + 0x0 ) will have a new Bridge ]
3. In the Last bridge, user will have to set parameter LAST_BRIDGE=1, which will be propagated into the field LAST_BRIDGE of register BRIDE_POSITION_REG and available for software to read.

For software to identify bridges,

1. Upon start, Software will start traversing through BAR-0 offset 0x0. 
2. Software will read the LAST_BRIDGE Field of BRIDGE_POSITON_REG for each bridge.
3. If LAST_BRIDGE is "1", It will stop finding more bridges, else Software will go to 0x0 + ( 128 KB ) and do the same process until it gets LAST_BRIDGE = "1".



