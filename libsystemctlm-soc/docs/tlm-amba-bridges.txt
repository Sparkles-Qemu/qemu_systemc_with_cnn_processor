TLM AMBA Bridges
----------------
Several TLM AMBA bridges are implemented in this repository. The purpose of
these bridges is to translate transactions to/from TLM Generic Payload
to/from AMBA wire signaling.

TLM Generic Payload transactions do not carry enough detail to express
some of the concepts used by the AXI protocol. To model these, we've
added an optional extension called Generic Attributes that describes
common transaction attributes in a bus protocol agnostic way. Well,
in reality they are a little biased towards AMBA but that is the intent.
The extension can carry attributes like a Secure/Non-Secure bit, a
transaction ID and more. These attributes are optional to use by
any TLM interconnect component so they can flow around even through
components that are not aware of them. Once they reach one of our
bridges, they attributes will be used to synthesize AXI traffic.

Principles
----------
P1. The bridges target the LT TLM programming style.
Unless we have a strong reason to, we try to stick to the LT programming
style.

P2. Bridges are transparent
Generally, a bridge should to the largest extent possible be transparent.
This is because what we are actually trying to implement, does not really
exist on real hardware.
Architecturally we should not modify transactions in ways such as buffering,
caching or upsizing. Instead, the bridge should aim at mapping GP's and
AXI signaling to each other as directly as possible. Still, in some cases
TLM transactions and RTL have so different semantics that the flows need
to be altered.

TLM-to-AXI
----------
The TLM to AXI bridge implements the translation between TLM Generic Payloads
coming from a TLM Initiator and bridges them over to AXI signaling as an
AXI Master.


                     .----------.
  TLM target socket | TLM-2-AXI |
  <---------------->|  Bridge   |
     b_transport()  '-----------'
                         /|\
                          | AXI Master port
                          |
                          |           AXI Slave port .-----------.
                           `------------------------>| AXI Slave |
                                                     |___________|


The flow is basically that a TLM module sends traffic onto the bridges
target_socket calling our b_transport() function. At this point we
receive a TLM Generic Payload potentially with a Generic Attributes extension.

Timing
------
The generic payload transaction may already be anottated with a delay.
Since we will translate this LT style transaction into RTL signal
wiggling that needs to wait for signal changes, we need to get rid of
the anottated delay by waiting for it and setting it to zero.

Multiple Outstanding transactions
---------------------------------
Our slave port's b_transport() can be called by multiple threads
simultaneously. This means that multiple masters, or even a single
multi-threaded master issue multiple outstanding transactions
towards our bridge. In order to fully utilize the pipelined nature
of the AXI protocol, we need to utilize this multi-threaded
TLM programming style to fill the various pipeline stages of the
bridge.

This is achieved by implementing the various phases in
separate threads and by using FIFOs to decouple the caller and
the various phases from each other.

Transaction Ordering
--------------------
The TLM-to-AXI side of things can rely on the fact that previous
components have not broken the AXI ordering rules. So what we need
to make sure is that we don't reorder transactions as they come in,
so we won't. We could in theory try to optimize the traffic, but
we shouldn't according to our principle P1, so we don't.

AXI-to-TLM
----------
The purpose of the AXI-to-TLM bridge is to translate AXI transactions
into TLM Generic Payloads and thereafter propagate these to TLM targets.
It acts as an AXI slave on the AXI side and as a TLM initiator on the
TLM side. AXI transactions received on the AXI slave port are converted
into TLM Generic Payloads containing AXI protocol details inside a TLM
Generic Attributes extension. The TLM Generic Payloads are thereafter
forwaded through the bridge's TLM initiator socket with b_transport to
TLM targets. The TLM Generic Payload response status after performing
the transaction is translated and propagated back to the AXI master in
the AXI response.

                             .----------.
                             | AXI-2-TLM |   TLM target socket
                             |  Bridge   |<-------------->
                             '-----------'    b_transport()
                                  /|\
                                   | AXI Slave port
                                   |
  .------------.  AXI master port  ¦
  | AXI Master |<------------------+
  |____________|


Timing
------
The generic payload transaction may be anottated with a delay at the
TLM target. The AXI-to-TLM bridge models this delay by waiting on it
before generating an AXI response for the AXI transaction to the AXI
master.

Multiple Outstanding transactions
---------------------------------
The AXI-to-TLM bridge supports multiple outstanding transactions. This
is achieved by implementing the various phases of the transaction in
separate threads and by using FIFOs to decouple the phases from each
other. Every TLM transaction on the TLM side is also executed in it's
own thread, this for being able to model individual transaction delays.

Transaction Ordering
--------------------
The AXI-to-TLM follows the AXI transaction ordering rules. It processes
transactions with the same transaction id or with overlapping addresses
in order. This is achieved by only executing one TLM transaction at a
time for transactions requiring to be kept ordered.

TLM to AXI4Lite
---------------
The TLM to AXI4Lite bridge is the AXI4Lite equivalent of the TLM to AXI
bridge and implements translation of TLM Generic Payloads into AXI4Lite
transactions and signaling. TLM initiators can through b_transport issue
generic payloads into the bridge which are translated to AXI4Lite
signaling and transactions and forwarded to AXI4Lite slaves. The AXI4Lite
responses to these transactions are translated back into the generic
payloads as TLM response statuses. Generic payloads that are to large to
be placed into one AXI4Lite transaction are divided into several AXI4Lite
transactions. The responses to these transactions are then merged and
translated into one TLM response status propagated back in the generic
payload. If the generic payload contains an attached TLM Generic
Attributes extensions the TLM to AXI4Lite bridge also translates
compatible attributes (as for example access permissions) into the
AXI4Lite transaction and signaling.

                     .---------------.
  TLM target socket | TLM-2-AXI4Lite |
  <---------------->|  Bridge        |
     b_transport()  '----------------'
                         /|\
                          | AXI4Lite Master port
                          |
                          |      AXI4Lite Slave port .----------------.
                           `------------------------>| AXI4Lite Slave |
                                                     |________________|

Timing
------
If the generic payload transaction is already anottated with a delay when
entering the TLM to AXI4Lite bridge, the anottated delay will be waited
for and set to zero before starting the AXI4Lite signal wiggling for the
translated transaction.

Multiple Outstanding transactions
---------------------------------
Similar to the TLM to AXI bridge, the TLM to AXI4Lite bridge is internally
structured in a pipeline where the different phases of AXI4Lite
transactions are decoupled. And as in the case of the TLM to AXI bridge
the TLM to AXI4Lite bridge's slave port's b_transport() can be called by
multiple threads simultaneously. A multithreaded TLM initiator is able to
generate multiple outstanding transactions and also fill all the pipeline
stages by calling b_transport simultanously from several threads.

AXI4Lite to TLM
---------------
The AXI4Lite to TLM bridge translates AXI4Lite transactions into TLM
Generic Payloads. It acts as an AXI4Lite slave on the AXI4Lite side and as
a TLM initiator on the TLM side. AXI4Lite transactions received on the
AXI4Lite slave port are translated into TLM Generic Payloads that are
thereafter forwaded to TLM targets through the bridge's TLM initiator
socket with b_transport.  Translated AXI4Lite protocol details (as access
permissions) are placed in a TLM Generic Attributes extension attached to
the generic payloads. After performing the TLM transaction the AXI4Lite to
TLM bridge translates the generic payload's response status into the
AXI4Lite response that is propagated back to the AXI4Lite master.

                             .----------------.
                             | AXI4Lite-2-TLM |   TLM target socket
                             |  Bridge        |<-------------->
                             '----------------'    b_transport()
                                  /|\
                                   | AXI4Lite Slave port
                                   |
  .-----------------.              ¦
  | AXI4Lite Master |<-------------+
  |_________________| AXI4Lite master port


Timing
------
The generic payload transaction may be anottated with a delay at the TLM
target. The AXI4Lite to TLM bridge models this delay by waiting on it
before generating an AXI4Lite response for the AXI4Lite transaction to the
master.

Multiple Outstanding transactions
---------------------------------
The AXI4Lite to TLM bridge is internally structured in a pipeline similar
to the AXI to TLM bridge. This pipeline decouples the different phases of
an AXI4Lite transaction and by doing this the bridge is able to support
multiple outstanding transactions on the AXI4Lite side (holding
transactions in a fifo when necessary). On the TLM side transactions are
issued in the order the corresponding AXI4Lite transactions where
received, one at a time in one of bridge's pipelining stages (due to the
reason that AXI4Lite does not support transactions IDs). If a TLM target
annotates the generic payload with a delay, the delay is modeled by
waiting for it in the bridge before wiggling of the AXI4Lite response
signals to the master starts.

Transaction Ordering
--------------------
Since the AXI4Lite protocol does not support transaction IDs all
transactions are expected to be excuted in order. The AXI4Lite to TLM
bridge achieves this by issuing translated TLM transactions and AXI4Lite
responses in the order the corresponding AXI4Lite transactions where
received.

TLM to ACE
----------
The TLM to ACE bridge implements the translation between TLM Generic
Payloads coming from a TLM Initiator, playing the role of an ACE Master,
into ACE (master) signaling. It also translates ACE snoop signaling into
TLM generic payloads that are forwarded through a TLM initiator socket (to
the ACE master).


                     .----------.
  TLM target socket | TLM-2-ACE |
  ----------------->|  Bridge   |
     b_transport()  |           |
                    |           |
   TLM snoop        |           |
   initiator socket |           |
  <-----------------|           |
     b_transport()  |           |
                    '-----------'
                         /|\
                          | ACE Master port
                          |
                          |     ACE Slave port .---------------.
                           `------------------>|     ACE       |
                                               | interconnect  |
                                               |_______________|


The flow is that a TLM module (acting as an ACE master) sends traffic onto
the bridges target_socket calling our b_transport() function.  ACE
specific transaction properties (such as the domain and snoop) are carried
in an Generic Attributes extension. The bridge will translate the generic
payload (with the extension) to ACE signal wiggling.

Incoming snoop transactions into the bridge from the opposite direction
(through the ACE snoop channels signals) are translated into generic
payloads with a Generic Attributes extension containing the ACE specific
properties (snoop transaction type). These transactions are forwarded to
the TLM module (acting as an ACE master) through the bridge's snoop init
socket.

Timing
------
The generic payload incoming into the bridge may already be anottated with
a delay. As in the TLM to AXI bridge the delay is waited for before signal
ACE wiggling starts.

A handled snoop request might return to the bridge with an anottated
delay. This delay is also waited for before the snoop response and data is
signaled out on the snoop channels.

Multiple Outstanding transactions
---------------------------------
As in the TLM to AXI bridge the TLM to ACE bridge's slave port's
b_transport() can be called by multiple threads simultaneously. This means
that multiple masters, or even a single multi-threaded master can issue
multiple outstanding transactions towards the bridge. The bridge is also
internally structured in a pipeline allowing for multiple outstanding
transactions to be generated on the ACE signaling.

ACE snoop requests detected on the ACE signaling are collected into a
generic payload container allowing for multiple outstading snoop requests
against the bridge. The ACE snoop requests are therafter handled and sent
one at a time to the connected TLM module (ACE master) through the TLM
initiator socket.

ACE to TLM
----------
The ACE to TLM bridge translates ACE signal wiggling and transactions into
TLM Generic Payloads carrying ACE specific attributes in a Generic
Attributes extension (such as domain and snoop transaction type). The
generic payloads are thereafter forwarded through an TLM initiator socket
to an ACE slave (interconnect). The bridge also contains a TLM target
socket handling snoop requests contained in generic payloads going in the
opposite direction. Generic payloads payloads incoming into the snoop
target socket are translates into ACE snoop channel signal wiggling.

                             .----------.
                             | ACE-2-TLM |   TLM initiator socket
                             |  Bridge   |--------------------->
                             |           |   b_transport()
                             |           |
                             |           |   TLM snoop target socket
                             |           |<---------------------
                             |           |   b_transport()
                             '-----------'
                                  /|\
                                   | ACE Slave port
                                   |
  .------------.  ACE master port  ¦
  | ACE Master |<------------------+
  |____________|


The flow is that a TLM module (acting as an ACE interconnect) receives ACE
transactions through the bridges initiator socket and generates ACE snoop
request towards an ACE master through the snoop target socket. ACE
specific attributes in both direction are carried in a Generic Attributes
extension.

Timing
------
Timing in the bridge is handled similarly as in the AXI to TLM bridge. If
a TLM generic payload issued by the bridge through the initatior socket
returns with an anotatted delay that delay is waited for before the ACE
response is signaled back to the ACE master.

An incoming ACE snoop request might enter the bridge with an anottated
delay. This delay also waited for before the snoop transaction is
signaled out on the snoop channels.

Multiple Outstanding transactions
---------------------------------
As in the AXI to TLM bridge the ACE to TLM bridge issues the TLM
transactions in threads. This means that the bridge suppports generating
multiple outstanding transactions to the connected TLM module (ACE
interconnect).

In the opposite direction the ACE to TLM bridge also supports multiple
outstanding ACE snoop requests from the connected TLM module (ACE
interconnect). The ACE snoop channels as the extended AXI channels are
structured in a pipeline allowing for multiple outstanding snoop requests
being signaled to the ACE master.

TLM to ACELite
----------
The TLM to ACELite bridge implements the translation between TLM Generic
Payloads coming from a TLM Initiator, playing the role of an ACELite
Master, into ACELite (master) signaling.

                     .--------------.
  TLM target socket | TLM-2-ACELite |
  ----------------->|  Bridge       |
     b_transport()  |               |
                    '---------------'
                         /|\
                          | ACELite Master port
                          |
                          |     ACELite Slave port .---------------.
                           `---------------------->|     ACE       |
                                                   | interconnect  |
                                                   |_______________|


The flow is that a TLM module (acting as an ACELite master) sends traffic onto
the bridges target_socket calling our b_transport() function.  ACE
specific transaction properties (such as the domain and snoop) are carried
in an Generic Attributes extension. The bridge will translate the generic
payload (with the extension) to ACELite signal wiggling.

Timing
------
The generic payload incoming into the bridge may already be anottated with
a delay. As in the TLM to AXI bridge the delay is waited for before signal
ACELite wiggling starts.

Multiple Outstanding transactions
---------------------------------
As in the TLM to AXI bridge the TLM to ACELite bridge's slave port's
b_transport() can be called by multiple threads simultaneously. This means
that multiple masters, or even a single multi-threaded master can issue
multiple outstanding transactions towards the bridge. The bridge is also
internally structured in a pipeline allowing for multiple outstanding
transactions to be generated on the ACELite signaling.

ACELite to TLM
----------
The ACELite to TLM bridge translates ACELite signal wiggling and
transactions into TLM Generic Payloads carrying ACE specific attributes in
a Generic Attributes extension (such as domain and snoop transaction
type). The generic payloads are thereafter forwarded through an TLM
initiator socket to an ACE slave (interconnect).

                             .---------------.
                             | ACELite-2-TLM |   TLM initiator socket
                             |  Bridge       |--------------------->
                             |               |   b_transport()
                             '---------------'
                                  /|\
                                   | ACELite Slave port
                      ACELite      |
  .----------------.  master port  ¦
  | ACELite Master |<--------------+
  |________________|


The flow is that a TLM module (acting as an ACE interconnect) receives
ACELite transactions through the bridges initiator socket containing ACE
specific attributes in a Generic Attributes extension.

Timing
------
Timing in the bridge is handled similarly as in the AXI to TLM bridge. If
a TLM generic payload issued by the bridge through the initatior socket
returns with an anotatted delay that delay is waited for before the
ACELite response is signaled back to the ACELite master.

Multiple Outstanding transactions
---------------------------------
As in the AXI to TLM bridge the ACELite to TLM bridge issues the TLM
transactions in threads. This means that the bridge suppports generating
multiple outstanding transactions to the connected TLM module (ACE
interconnect).

TLM to CHI bridges
------------------

The TLM to CHI bridges (type RN-F and type SN) translate TLM generic
payloads, with attached CHI attributes extensions, and describing CHI
messages into CHI packets and CHI signal wiggling on the TX channels. The
bridges also translate back incoming CHI packets on the CHI RX link
signals into generic payloads with attached CHI attributes.

The TLM to CHI bridge of type RN-F contains three TLM target sockets where
incoming REQ, RSP, DAT messages are received (left hand side in the
picture). The messages are thereafter translated into signal wiggling on
the corresponding CHI TX channel (right hand side in the picture below).

The bridge also translate incoming RSP, DAT and SNP messages on the CHI RX
channel signals (right hand side in the picture) into TLM generic
payloads with CHI attributes extensions which are thereafter transmitted
on the corresponding TLM initiator socket (left hand side in the picture
below).

                     .----------.
  TLM target socket |           |
     b_transport()  |           | CHI TXREQ, TXRSP, TXDAT channels
    (REQ, RSP, DAT) | TLM-2-CHI |
  ----------------->|  Bridge   |------------------->
  ----------------->|    RN-F   |------------------->
  ----------------->|           |------------------->
                    |           |
   TLM snoop        |           |
   initiator socket |           | CHI RXRSP, RXDAT, RXSNP channels
    (RSP, DAT, SNP) |           |
  <-----------------|           |<-------------------
  <-----------------|           |<-------------------
  <-----------------|           |<-------------------
                    '-----------'

The TLM to CHI bridge of type SN contains two TLM target sockets where
incoming REQ and DAT messages are received (left hand side in the
picture below). The messages are thereafter translated into signal wiggling on
the corresponding CHI TX channel (right hand side in the picture below).

The bridge also translate incoming RSP and DAT messages on the CHI RX
channel signals (right hand side in the picture) into TLM generic
payloads with CHI attributes extensions which are thereafter transmitted
on the corresponding TLM initiator socket (left hand side in the picture
below).

                     .----------.
  TLM target socket |           |
     b_transport()  |           | CHI TXREQ, TXDAT channels
    (REQ, DAT)      | TLM-2-CHI |
  ----------------->|  Bridge   |------------------->
  ----------------->|    SN     |------------------->
                    |           |
   TLM snoop        |           |
   initiator socket |           | CHI RXRSP, RXDAT channels
    (RSP, DAT)      |           |
  <-----------------|           |<-------------------
  <-----------------|           |<-------------------
                    '-----------'

Timing
------
Incoming CHI messages might enter the bridges (type RN-F or SN) with an
anottated delay. This delay is waited for before the message's CHI signal
wiggling starts.

If a TLM generic payload issued by the bridges (type RN-F or SN) through
one of the initatior sockets returns with an anotatted delay that delay is
waited for before processing of the next CHI message starts.

CHI to TLM bridges
------------------

The CHI to TLM bridges (type RN-F and type SN) operate in a similar fashion
as the TLM to CHI bridges. The bridges translate TLM generic payloads,
with attached CHI attributes extensions, and describing CHI messages into
CHI packets and CHI signal wiggling on the TX channels. The bridges also
translate back incoming CHI packets on the CHI RX link signals into
generic payloads with attached CHI attributes.

The CHI to TLM bridge of type RN-F contains three TLM target sockets where
incoming RSP, DAT and SNP messages are received (left hand side in the
picture). The messages are thereafter translated into signal wiggling on
the corresponding CHI TX channel (right hand side in the picture below).

The bridge also translate incoming REQ, RSP and DAT messages on the CHI RX
channel signals (right hand side in the picture) into TLM generic
payloads with CHI attributes extensions which are thereafter transmitted
on the corresponding TLM initiator socket (left hand side in the picture
below).


                     .----------.
    TLM initiator   |           |
       socket       |           | CHI RXREQ, RXRSP, RXDAT channels
    (REQ, RSP, DAT) | CHI-2-TLM |
  <-----------------|  Bridge   |<-------------------
  <-----------------|    RN-F   |<-------------------
  <-----------------|           |<-------------------
                    |           |
 TLM target sockets |           |
     b_transport()  |           | CHI TXRSP, TXDAT, TXSNP channels
    (RSP, DAT, SNP) |           |
  ----------------->|           |------------------->
  ----------------->|           |------------------->
  ----------------->|           |------------------->
                    '-----------'

The CHI to TLM bridge of type SN contains two TLM target sockets where
outgoing RSP and DAT messages are received (left hand side in the
picture below). The messages are thereafter translated into signal wiggling on
the corresponding CHI TX channel (right hand side in the picture below).

The bridge also translate incoming REQ and DAT messages on the CHI RX
channel signals (right hand side in the picture) into TLM generic
payloads with CHI attributes extensions which are thereafter transmitted
on the corresponding TLM initiator socket (left hand side in the picture
below).

                     .----------.
    TLM initiator   |           |
       socket       |           | CHI TXREQ, TXDAT channels
     (REQ, DAT)     | CHI-2-TLM |
  <-----------------|  Bridge   |<-------------------
  <-----------------|    SN     |<-------------------
                    |           |
                    |           |
  TLM target socket |           |
     b_transport()  |           | CHI TXRSP, TXDAT channels
     (RSP, DAT)     |           |
  ----------------->|           |------------------->
  ----------------->|           |------------------->
                    '-----------'

Timing
------

Timing is handled in the manner as in the TLM to CHI bridges. If incoming
CHI messages enter the bridges (type RN-F or SN) with an anottated delay,
the delay is waited for before the message's CHI signal wiggling starts.

If a TLM generic payload issued by the bridges (type RN-F or SN) through
one of the initatior sockets returns with an anotatted delay that delay is
waited for before processing of the next CHI message starts.
